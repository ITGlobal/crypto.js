{"version":3,"sources":["webpack://nsd/webpack/universalModuleDefinition","webpack://nsd/webpack/bootstrap","webpack://nsd/./index.ts","webpack://nsd/./internals/Deferred.ts","webpack://nsd/./CryptoClient.ts","webpack://nsd/./internals/helpers.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__export","Deferred","this","handlers","resolution","then","done","fail","progress","push","handle","resolve","result","reject","error","notify","length","handler","funcIndex","shift","Deferred_1","helpers_1","CryptoClient","options","session","_a","settings","getOptions","noSsl","port","baseUrl","getVersion","promise","send","transformPromise","getProfiles","getTypes","open","args","_this","sessionPromise","res","id","type","profile","close","executeSession","pack","files","cur","len","arr","Array","deferred","resolveFile","x","rejectFile","err","forEach","file","index","toCrutchBlob","b","content","encoding","unpack","buffer","data","getCerts","sign","signature","detached","signIn","pkcs7","sendCertificate","sendChain","getHeadCert","getHeadCertFor","cc","method","path","success","whenSession","func","noSession","code","message","defaultPort","useFileApi","__1","sendRequest","url","xhr_1","XHR","onload","response","JSON","parse","responseText","xhrStatus","status","onerror","stringify","e","Blob","blob","reader","FileReader","str","replace","originalError","readAsDataURL","blobToCrutchBlob","address","request","getPort","vals","defs","opts","keys","val","undefined","test","navigator","userAgent","XDomainRequest","XMLHttpRequest"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,OAAA,GAAAH,GACA,iBAAAC,QACAA,QAAA,IAAAD,IAEAD,EAAA,IAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,GAAA,CACAC,EAAAD,EACAE,GAAA,EACAT,QAAA,IAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,+ICjFAC,CAAAlC,EAAA,mFCCA,IAAAmC,EAAA,oBAAAA,IACcC,KAAAC,SAA8B,GAE9BD,KAAAE,YAAsB,EAmCpC,OAjCIH,EAAAL,UAAAS,KAAA,SACIC,EACAC,EACAC,GAEAN,KAAKC,SAASM,KAAK,CAACH,EAAMC,EAAMC,IAC5BN,KAAKE,WAAa,GACtBF,KAAKQ,OAAOR,KAAKE,aAGrBH,EAAAL,UAAAe,QAAA,SAAQC,GACJV,KAAKU,OAASA,EACdV,KAAKQ,OAAOR,KAAKE,WAAa,IAGlCH,EAAAL,UAAAiB,OAAA,SAAOC,GACHZ,KAAKU,OAASE,EACdZ,KAAKQ,OAAOR,KAAKE,WAAa,IAGlCH,EAAAL,UAAAmB,OAAA,SAAOP,GACH,IAAK,IAAIxC,EAAI,EAAGA,EAAIkC,KAAKC,SAASa,SAAUhD,EAAG,CAC3C,IAAMiD,EAAUf,KAAKC,SAASnC,GAAG,GAC7BiD,GAASA,EAAQ9C,KAAK,KAAMqC,KAI9BP,EAAAL,UAAAc,OAAV,SAAiBQ,GACb,KAAOhB,KAAKC,SAASa,QAAQ,CACzB,IAAMC,EAAUf,KAAKC,SAASgB,QAAQD,GAClCD,GAASA,EAAQ9C,KAAK,KAAM+B,KAAKU,UAGjDX,EAtCA,GAAazC,EAAAyC,0FCUb,IAAAmB,EAAAtD,EAAA,GACAuD,EAAAvD,EAAA,GAEAwD,EAAA,WAmBI,SAAAA,EAAoBC,GAAArB,KAAAqB,UAFpBrB,KAAAsB,QAA0B,KAGhB,IAAAC,EAAAvB,KAAAwB,SAAAL,EAAAM,WAAAJ,EAAAD,EAAAI,UAAEE,EAAAH,EAAAG,MAAOH,EAAAI,KACf3B,KAAK4B,SAAWF,EAAQ,OAAS,SAAW,gBAgNpD,OA1MIN,EAAA1B,UAAAmC,WAAA,WACI,IAAMC,EAAUX,EAAAY,KAAmB,MAAO/B,KAAK4B,QAAS,WAAY,MACpE,OAAO5B,KAAKwB,SAASQ,iBAAiBF,IAM1CV,EAAA1B,UAAAuC,YAAA,WACI,IAAMH,EAAUX,EAAAY,KAAsB,MAAO/B,KAAK4B,QAAS,gBAAiB,MAC5E,OAAO5B,KAAKwB,SAASQ,iBAAiBF,IAM1CV,EAAA1B,UAAAwC,SAAA,WACI,IAAMJ,EAAUX,EAAAY,KAAe,OAAQ/B,KAAK4B,QAAS,aAAc,MACnE,OAAO5B,KAAKwB,SAASQ,iBAA2BF,IASpDV,EAAA1B,UAAAyC,KAAA,SAAKC,GAAL,IAAAC,EAAArC,KACIA,KAAKsB,QAAU,KACf,IAAMQ,EAAU9B,KAAKsC,eAAiBnB,EAAAY,KAAqB,OAAQ/B,KAAK4B,QAAS,YAAaQ,EAAM,SAAAG,GAChG,OAAOF,EAAKf,QAAU,CAClBkB,GAAID,EAAIC,GACRC,KAAMF,EAAIE,KACVC,QAASH,EAAIG,WAMrB,OAHAZ,EAAQ3B,KAAK,KAAM,WACfkC,EAAKC,eAAiB,OAEnBtC,KAAKwB,SAASQ,iBAAiCF,IAO1DV,EAAA1B,UAAAiD,MAAA,eAAAN,EAAArC,KACI,OAAOA,KAAK4C,eAAe,OAAQ,aAAc,KAAM,SAAAL,GAGnD,OAFAF,EAAKC,eAAiB,KACtBD,EAAKf,QAAU,KACR,CACHkB,GAAID,EAAIC,GACRC,KAAMF,EAAIE,KACVC,QAASH,EAAIG,YAKzBtB,EAAA1B,UAAAmD,KAAA,SAAKC,EAA+BzB,GAApC,IAW0B0B,EAAKC,EAX/BX,EAAArC,KACUiD,EAAqB,IAAIC,MAAMJ,EAAMhC,QACrCqC,EAAW,IAAIjC,EAAAnB,SASfqD,GAAgBL,EAKnB,EALwBC,EAKrBF,EAAMhC,OAJD,aACGiC,IAAQC,GARlBX,EAAKO,eAAmC,OAAQ,YAAa,CACzDE,MAAOG,EACP5B,QAASA,IACVlB,KAAK,SAAAkD,GAAK,OAAAF,EAAS1C,QAAQ4C,IAAI,SAAAA,GAAK,OAAAF,EAASxC,OAAO0C,OAUvDC,EAAa,SAACC,GACdD,EAAa,aACbH,EAASxC,OAAO4C,IAcpB,OAXQT,EAAOU,QAAQ,SAACC,EAAMC,GAC1BvC,EAAAwC,aAAaF,GAAMtD,KAAK,SAAAyD,GACpBX,EAAIS,GAAS,CACTrF,KAAMoF,EAAKpF,KACXwF,QAASD,EAAEC,QACXC,SAAUF,EAAEE,UAEhBV,KACDE,KAGAtD,KAAKwB,SAASQ,iBAAqCmB,IAG9D/B,EAAA1B,UAAAqE,OAAA,SAAOC,GAAP,IAAA3B,EAAArC,KACUmD,EAAW,IAAIjC,EAAAnB,SAQrB,OANAoB,EAAAwC,aAAaK,GAAQ7D,KAAK,SAAAyD,GACtB,OAAOvB,EAAKO,eAA8B,OAAQ,cAAe,CAC7DqB,KAAML,IACPzD,KAAK,SAAAkD,GAAK,OAAAF,EAAS1C,QAAQ4C,IAAI,SAAAA,GAAK,OAAAF,EAASxC,OAAO0C,MACxD,SAAAA,GAAK,OAAAF,EAASxC,OAAO0C,KAEjBrD,KAAKwB,SAASQ,iBAAgCmB,IAGzD/B,EAAA1B,UAAAwE,SAAA,WACI,OAAOlE,KAAK4C,eAAe,OAAQ,aAAc,OAGrDxB,EAAA1B,UAAAyE,KAAA,SAAKF,EAA0B5C,EAAwB+C,GAAvD,IAGQC,EACAC,EAJRjC,EAAArC,KACUmD,EAAW,IAAIjC,EAAAnB,SA0BrB,OAtBIqE,GACAjD,EAAAwC,aAAaS,GAAWjE,KAAK,SAAAyD,GAAK,OAAAU,EAASV,IAC3CS,GAAW,IAGXC,EAAS,KACTD,GAAW,GAGflD,EAAAwC,aAAaM,GAAM9D,KAAK,SAAAyD,GACpB,OAAOvB,EAAKO,eAAmC,OAAQ,YAAa,CAChEqB,KAAML,EACNQ,UAAWE,EACXjD,QAASF,EAAAM,WAAWJ,EAAS,CACzBkD,OAAO,EACPF,SAAUA,EACVG,iBAAiB,EACjBC,WAAW,MAEhBtE,KAAK,SAAAkD,GAAK,OAAAF,EAAS1C,QAAQ4C,IAAI,SAAAA,GAAK,OAAAF,EAASxC,OAAO0C,MACxD,SAAAA,GAAK,OAAAF,EAASxC,OAAO0C,KAEjBrD,KAAKwB,SAASQ,iBAAqCmB,IAG9D/B,EAAA1B,UAAAgF,YAAA,WACI,OAAO1E,KAAK4C,eAAe,OAAQ,YAAa,OAGpDxB,EAAA1B,UAAAiF,eAAA,SAAevC,GACX,IAAMe,EAAW,IAAIjC,EAAAnB,SAEf6E,EAAK,IAAIxD,EAAapB,KAAKqB,SAoBjC,OAlBAuD,EAAGzC,KAAKC,GAAMjC,KACV,WACIyE,EAAGF,cAAcvE,KACb,SAAChC,GACGyG,EAAGjC,QAAQxC,KACP,WAAM,OAAAgD,EAAS1C,QAAQtC,IACvB,SAAAoF,GAAO,OAAAJ,EAASxC,OAAO4C,MAG/B,SAACA,GACGqB,EAAGjC,QAAQxC,KACP,WAAM,OAAAgD,EAASxC,OAAO4C,IACtB,WAAM,OAAAJ,EAASxC,OAAO4C,QAItC,SAACA,GAAQ,OAAAJ,EAASxC,OAAO4C,KAEtBvD,KAAKwB,SAASQ,iBAA+BmB,IAGhD/B,EAAA1B,UAAAkD,eAAR,SAA0BiC,EAAgBC,EAAcb,EAAWc,GAAnE,IAAA1C,EAAArC,KACI,OAAOA,KAAKgF,YAAY,WAMpB,OALY,MAARf,EACAA,EAAO5B,EAAKf,QAAQkB,GAEpByB,EAAKzB,GAAKH,EAAKf,QAAQkB,GAEpBrB,EAAAY,KAAK8C,EAAQxC,EAAKT,QAASkD,EAAMb,EAAMc,MAI9C3D,EAAA1B,UAAAsF,YAAR,SAAuBC,GACnB,IAAM9B,EAAW,IAAIjC,EAAAnB,SAUrB,SAAAmF,IACI/B,EAASxC,OAAO,CACZwE,KAAM,eACNC,QAAS,+BAIjB,OAfIpF,KAAKsC,eACLtC,KAAKsC,eAAenC,KAAK,WACrB8E,IAAO9E,KAAK,SAAAkD,GAAK,OAAAF,EAAS1C,QAAQ4C,IAAI,SAAAA,GAAK,OAAAF,EAASxC,OAAO0C,IAAI,SAAAA,GAAK,OAAAF,EAAStC,OAAOwC,MACrF6B,GAEHA,IAUGlF,KAAKwB,SAASQ,iBAAoBmB,IA9NtC/B,EAAAI,SAAiC,CACpC6D,YAAa,MACb1D,KAAM,CAAE5C,OAAQ,GAChBuG,YAAY,EACZtD,iBAAkB,SAAAF,GAAW,OAAAA,GAC7BJ,OAAO,GA2NfN,EArOA,GAAa9D,EAAA8D,8FCdb,IAAAF,EAAAtD,EAAA,GACA2H,EAAA3H,EAAA,GAyFA,SAAA4H,EAAwBX,EAAgBY,EAAaxB,EAAWc,GAC5D,IAAM5B,EAAW,IAAIjC,EAAAnB,SACrB,IACI,IAAM2F,EAAM,IAAIC,EAEhBD,EAAIE,OAAS,WACT,IAAMC,EAAWC,KAAKC,MAAML,EAAIM,cAC1BC,EAAYJ,EAASK,OACrB3D,EAAMsD,EAAShC,QAEjBoC,EAAY,GAAKA,EAAY,IAC7B9C,EAAS1C,QAAQsE,EAAUA,EAAQxC,GAAOA,GAE1CY,EAASxC,OAAO4B,IAGxBmD,EAAIS,QAAU,WACVhD,EAASxC,OAAO,CACZwE,KAAM,qBACNC,QAAS,8BAIjBM,EAAIvD,KAAK0C,EAAQY,GACjBC,EAAI3D,KAAK+D,KAAKM,UAAUnC,IAC1B,MAAOoC,GACLlD,EAASxC,OAAO,CACZwE,KAAM,qBACNC,QAASiB,EAAEjB,UAGnB,OAAOjC,EAlHX7F,EAAAqG,aAAA,SAA6BM,GACzB,GAAIvG,OAAa,MAAKuG,aAAgBqC,KAClC,OAOR,SAA0BC,GACtB,IAAMpD,EAAW,IAAIjC,EAAAnB,SAEfyG,EAAS,IAAIC,WAsBnB,OApBAD,EAAOZ,OAAS,WACZ,IAAMc,GAAe1G,KAAKU,QAAoB,IAAIiG,QAAQ,oBAAqB,IAC/ExD,EAAS1C,QAAQ,CACboD,QAAS6C,EACT5C,SAAU,YAIlB0C,EAAOL,QAAU,WACbhD,EAASxC,OAAO,CACZwE,KAAM,iBACNC,QAAS,gCACThD,KAAM,CACFwE,cAAeJ,EAAO5F,UAKlC4F,EAAOK,cAAcN,GAEdpD,EAhCI2D,CAAuB7C,GAElC,IAAMd,EAAW,IAAIjC,EAAAnB,SAErB,OADAoD,EAAS1C,QAAqBwD,GACvBd,GA0CX7F,EAAAyE,KAAA,SAAwB8C,EAAgBkC,EAAiBC,EAAiB/C,EAAWc,GACjF,IAAM5B,EAAW,IAAIjC,EAAAnB,SA+BrB,OA3CJ,SAAoBgH,GAChB,IAA0C,IAAtCxB,EAAAnE,aAAaI,SAASG,KAAK5C,MAE3B,OAAOyG,EAAe,MADZuB,EAAUxB,EAAAnE,aAAaI,SAAS6D,YAAc,YACtB,KAAM,MAExC,IAAMlC,EAAW,IAAIjC,EAAAnB,SAErB,OADAoD,EAAS1C,QAAQ8E,EAAAnE,aAAaI,SAASG,KAAK5C,OACrCoE,EAOX8D,CAAWF,GAAS5G,KAChB,SAACP,GACG2F,EAAAnE,aAAaI,SAASG,KAAK5C,MAAQa,EACnC,IAAI6F,EAAMsB,EAAUxB,EAAAnE,aAAaI,SAASG,KAAK5C,MAAQ,OAASiI,EAChExB,EAAeX,EAAQY,EAAKxB,EAAMc,GAAS5E,KACvC,SAACO,GACGyC,EAAS1C,QAAQC,IAErB,SAACE,GACGuC,EAASxC,OAAOC,MAM5B,SAACA,GACG2E,EAAAnE,aAAaI,SAASG,KAAK5C,MAAQwG,EAAAnE,aAAaI,SAAS6D,YACzD,IAAII,EAAMsB,EAAUxB,EAAAnE,aAAaI,SAASG,KAAK5C,MAAQ,OAASiI,EAChExB,EAAeX,EAAQY,EAAKxB,EAAMc,GAAS5E,KACvC,SAACO,GACGyC,EAAS1C,QAAQC,IAErB,SAACE,GACGuC,EAASxC,OAAOC,OAMzBuC,GAqCX7F,EAAAmE,WAAA,SAA8ByF,EAASC,GACnC,IAAMC,EAAO,GAQb,OAPAF,EAAOA,GAAW,GAElB1I,OAAO6I,KAAKF,GAAM3D,QAAQ,SAAAnE,GACtB,IAAMiI,EAAMJ,EAAK7H,GACjB+H,EAAK/H,QAAekI,IAARD,EAAoBH,EAAK9H,GAAOiI,IAGtCF,GAId,IAAMzB,EAAM,aAAa6B,KAAKC,UAAUC,WAAaC,eAAiBC","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"nsd\"] = factory();\n\telse\n\t\troot[\"nsd\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export * from './ISignatureApplet';\r\nexport * from './CryptoClient';\r\n","import { IPromise, IError, IProgress } from '../ISignatureApplet';\r\n\r\nexport class Deferred<TResult> implements IPromise<TResult> {\r\n    protected handlers: Array<Function>[] = [];\r\n    protected result: any;\r\n    protected resolution: number = -1;\r\n\r\n    then(\r\n        done: (result: TResult) => any,\r\n        fail?: (error: IError) => any,\r\n        progress?: (progress: IProgress) => any\r\n    ): any {\r\n        this.handlers.push([done, fail, progress]);\r\n        if (this.resolution < 0) return;\r\n        this.handle(this.resolution);\r\n    }\r\n\r\n    resolve(result: TResult): void {\r\n        this.result = result;\r\n        this.handle(this.resolution = 0);\r\n    }\r\n\r\n    reject(error: IError): void {\r\n        this.result = error;\r\n        this.handle(this.resolution = 1);\r\n    }\r\n\r\n    notify(progress: IProgress): void {\r\n        for (let i = 0; i < this.handlers.length; ++i) {\r\n            const handler = this.handlers[i][2];\r\n            if (handler) handler.call(null, progress);\r\n        }\r\n    }\r\n\r\n    protected handle(funcIndex: number): void {\r\n        while (this.handlers.length) {\r\n            const handler = this.handlers.shift()[funcIndex];\r\n            if (handler) handler.call(null, this.result);\r\n        }\r\n    }\r\n}\r\n","import {\r\n    ISignatureApplet,\r\n    IUnpackResult,\r\n    IPackOptions,\r\n    IPromise,\r\n    ICrutchBlob,\r\n    ICrutchFile,\r\n    ICertificate,\r\n    ISignOptions,\r\n    IVersionInfo,\r\n    ICryptoProfiles\r\n} from './ISignatureApplet';\r\nimport { Deferred } from './internals/Deferred';\r\nimport { send, getOptions, toCrutchBlob } from './internals/helpers';\r\n\r\nexport class CryptoClient implements ISignatureApplet {\r\n    private readonly settings: ICryptoClientOptions;\r\n    private readonly baseUrl: string;\r\n    private sessionPromise: IPromise<ICryptoSession>;\r\n\r\n    static settings: ICryptoClientOptions = {\r\n        defaultPort: 48737,\r\n        port: { value: -1 },\r\n        useFileApi: false,\r\n        transformPromise: promise => promise,\r\n        noSsl: false\r\n    };\r\n\r\n    /**\r\n     * Текущая открытая сессия\r\n     * @readonly\r\n     */\r\n    session: ICryptoSession = null;\r\n\r\n    constructor(private options?: ICryptoClientOptions) {\r\n        const { noSsl, port } = this.settings = getOptions(options, CryptoClient.settings);\r\n        this.baseUrl = (noSsl ? 'http' : 'https') + '://127.0.0.1:';\r\n    }\r\n\r\n    /**\r\n     * Возвращает информацию о версии криптосервиса\r\n     */\r\n    getVersion(): IPromise<IVersionInfo> {\r\n        const promise = send<IVersionInfo>('GET', this.baseUrl, '/version', null);\r\n        return this.settings.transformPromise(promise);\r\n    }\r\n\r\n    /**\r\n    * Возвращает информацию о криптографических профилях\r\n    */\r\n    getProfiles(): IPromise<ICryptoProfiles> {\r\n        const promise = send<ICryptoProfiles>('GET', this.baseUrl, '/csp/profiles', null);\r\n        return this.settings.transformPromise(promise);\r\n    }\r\n\r\n    /**\r\n     * Возвращает список установленных справочников сертификатов: 'GOST' и/или 'RSA'\r\n     */\r\n    getTypes(): IPromise<string[]> {\r\n        const promise = send<string[]>('POST', this.baseUrl, '/csp/types', null);\r\n        return this.settings.transformPromise<string[]>(promise);\r\n    }\r\n\r\n    /**\r\n     * Открывает сессию. Пытается открыть существующую сессию, если указан {@type ICryptoSessionId индентификатор}.\r\n     * Затем пытается открыть новую сессию, если указаны {@type ICryptoSessionParams параметры}.\r\n     * @param args идентификатор и/или параметры сессии\r\n     * @returns открытая сессия\r\n     */\r\n    open(args: ICryptoSessionId | ICryptoSessionParams): IPromise<ICryptoSession> {\r\n        this.session = null;\r\n        const promise = this.sessionPromise = send<ICryptoSession>('POST', this.baseUrl, '/csp/open', args, res => {\r\n            return this.session = {\r\n                id: res.id,\r\n                type: res.type,\r\n                profile: res.profile\r\n            };\r\n        });\r\n        promise.then(null, () => {\r\n            this.sessionPromise = null;\r\n        });\r\n        return this.settings.transformPromise<ICryptoSession>(promise);\r\n    }\r\n\r\n    /**\r\n     * Закрывает сессию\r\n     * @returns закрытая сессия\r\n     */\r\n    close(): IPromise<ICryptoSession> {\r\n        return this.executeSession('POST', '/csp/close', null, res => {\r\n            this.sessionPromise = null;\r\n            this.session = null;\r\n            return {\r\n                id: res.id,\r\n                type: res.type,\r\n                profile: res.profile\r\n            };\r\n        });\r\n    }\r\n\r\n    pack(files: File[] | ICrutchFile[], options: IPackOptions): IPromise<Blob | ICrutchBlob> {\r\n        const arr: ICrutchFile[] = new Array(files.length);\r\n        const deferred = new Deferred<Blob | ICrutchBlob>();\r\n\r\n        const sendRequest = () => {\r\n            this.executeSession<Blob | ICrutchBlob>('POST', '/csp/pack', {\r\n                files: arr,\r\n                options: options\r\n            }).then(x => deferred.resolve(x), x => deferred.reject(x));\r\n        };\r\n\r\n        const resolveFile = ((cur, len) => {\r\n            return () => {\r\n                if (++cur !== len) return;\r\n                sendRequest();\r\n            };\r\n        })(0, files.length);\r\n\r\n        let rejectFile = (err) => {\r\n            rejectFile = () => { };\r\n            deferred.reject(err);\r\n        };\r\n\r\n        (<any[]>files).forEach((file, index) => {\r\n            toCrutchBlob(file).then(b => {\r\n                arr[index] = {\r\n                    name: file.name,\r\n                    content: b.content,\r\n                    encoding: b.encoding\r\n                };\r\n                resolveFile();\r\n            }, rejectFile);\r\n        });\r\n\r\n        return this.settings.transformPromise<Blob | ICrutchBlob>(deferred);\r\n    }\r\n\r\n    unpack(buffer: Blob | ICrutchBlob): IPromise<IUnpackResult> {\r\n        const deferred = new Deferred<IUnpackResult>();\r\n\r\n        toCrutchBlob(buffer).then(b => {\r\n            return this.executeSession<IUnpackResult>('POST', '/csp/unpack', {\r\n                data: b\r\n            }).then(x => deferred.resolve(x), x => deferred.reject(x));\r\n        }, x => deferred.reject(x));\r\n\r\n        return this.settings.transformPromise<IUnpackResult>(deferred);\r\n    }\r\n\r\n    getCerts(): IPromise<ICertificate[]> {\r\n        return this.executeSession('POST', '/csp/certs', null);\r\n    }\r\n\r\n    sign(data: Blob | ICrutchBlob, options?: ISignOptions, signature?: Blob | ICrutchBlob): IPromise<Blob | ICrutchBlob> {\r\n        const deferred = new Deferred<Blob | ICrutchBlob>();\r\n\r\n        let detached: boolean;\r\n        let signIn: ICrutchBlob;\r\n        if (signature) {\r\n            toCrutchBlob(signature).then(b => signIn = b);\r\n            detached = true;\r\n        }\r\n        else {\r\n            signIn = null;\r\n            detached = false;\r\n        }\r\n\r\n        toCrutchBlob(data).then(b => {\r\n            return this.executeSession<Blob | ICrutchBlob>('POST', '/csp/sign', {\r\n                data: b,\r\n                signature: signIn,\r\n                options: getOptions(options, {\r\n                    pkcs7: false,\r\n                    detached: detached,\r\n                    sendCertificate: false,\r\n                    sendChain: false\r\n                })\r\n            }).then(x => deferred.resolve(x), x => deferred.reject(x));\r\n        }, x => deferred.reject(x));\r\n\r\n        return this.settings.transformPromise<Blob | ICrutchBlob>(deferred);\r\n    }\r\n\r\n    getHeadCert(): IPromise<ICertificate> {\r\n        return this.executeSession('POST', '/csp/head', null);\r\n    }\r\n\r\n    getHeadCertFor(args: ICryptoSessionParams): IPromise<ICertificate> {\r\n        const deferred = new Deferred<ICertificate>();\r\n\r\n        const cc = new CryptoClient(this.options);\r\n\r\n        cc.open(args).then(\r\n            () => {\r\n                cc.getHeadCert().then(\r\n                    (c) => {\r\n                        cc.close().then(\r\n                            () => deferred.resolve(c),\r\n                            err => deferred.reject(err)\r\n                        );\r\n                    },\r\n                    (err) => {\r\n                        cc.close().then(\r\n                            () => deferred.reject(err),\r\n                            () => deferred.reject(err)\r\n                        );\r\n                    });\r\n            },\r\n            (err) => deferred.reject(err));\r\n\r\n        return this.settings.transformPromise<ICertificate>(deferred);\r\n    }\r\n\r\n    private executeSession<T>(method: string, path: string, data: any, success?: (res: any) => T): IPromise<T> {\r\n        return this.whenSession(() => {\r\n            if (data == null) {\r\n                data = this.session.id;\r\n            } else {\r\n                data.id = this.session.id;\r\n            }\r\n            return send(method, this.baseUrl, path, data, success);\r\n        });\r\n    }\r\n\r\n    private whenSession<T>(func: () => IPromise<T>): IPromise<T> {\r\n        const deferred = new Deferred<T>();\r\n\r\n        if (this.sessionPromise) {\r\n            this.sessionPromise.then(() => {\r\n                func().then(x => deferred.resolve(x), x => deferred.reject(x), x => deferred.notify(x));\r\n            }, noSession);\r\n        } else {\r\n            noSession();\r\n        }\r\n\r\n        function noSession() {\r\n            deferred.reject({\r\n                code: 'E_NO_SESSION',\r\n                message: 'There is no active session'\r\n            });\r\n        }\r\n\r\n        return this.settings.transformPromise<T>(deferred);\r\n    }\r\n}\r\n\r\nexport interface ICryptoClientOptions {\r\n    /**\r\n     * Порт коммутатора\r\n     * @default 48737\r\n     */\r\n    defaultPort?: number;\r\n\r\n    /**\r\n     * Порт крипто-сервиса\r\n     * @default 48737\r\n     */\r\n    port?: {value};\r\n\r\n    /**\r\n     * Использовать объекты File API: Blob, File - в результатах методов\r\n     * @default false\r\n     * @todo реализовать опцию\r\n     */\r\n    useFileApi?: boolean;\r\n\r\n    /**\r\n     * Функция преобразования объектов {@type IPromise}\r\n     * @default identity функция, возвращающая первый параметр\r\n     */\r\n    transformPromise?: <T>(promise: IPromise<T>) => IPromise<T>;\r\n\r\n    /**\r\n     * Делать запросы к серверу по HTTP\r\n     * @default false\r\n     */\r\n    noSsl?: boolean;\r\n}\r\n\r\n/**\r\n * Идентификатор сессии\r\n */\r\nexport interface ICryptoSessionId {\r\n    /**\r\n     * Идентификатор\r\n     */\r\n    id: string;\r\n}\r\n\r\n/**\r\n * Параметры сессии\r\n */\r\nexport interface ICryptoSessionParams {\r\n    /**\r\n     * Тип криптографии: 'GOST' или 'RSA'\r\n     */\r\n    type: string;\r\n\r\n    /**\r\n     * Профиль\r\n     * @default 'My'\r\n     */\r\n    profile?: string;\r\n}\r\n\r\n/**\r\n * Сессия\r\n */\r\nexport interface ICryptoSession extends ICryptoSessionId {\r\n    id: string;\r\n    type: string;\r\n    profile: string;\r\n}\r\n","import { IPromise, ICrutchBlob } from '../ISignatureApplet';\r\nimport { Deferred } from './Deferred';\r\nimport { CryptoClient } from '..';\r\n\r\n/**\r\n * Конвертирует {@type Blob} в строку {@type ICrutchBlob}, строку оставляет как есть\r\n * @param data\r\n */\r\nexport function toCrutchBlob(data: Blob | ICrutchBlob): IPromise<ICrutchBlob> {\r\n    if (window['Blob'] && data instanceof Blob) {\r\n        return blobToCrutchBlob(<Blob>data);\r\n    }\r\n    const deferred = new Deferred<ICrutchBlob>();\r\n    deferred.resolve(<ICrutchBlob>data);\r\n    return deferred;\r\n}\r\n\r\nfunction blobToCrutchBlob(blob: Blob): IPromise<ICrutchBlob> {\r\n    const deferred = new Deferred<ICrutchBlob>();\r\n\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = function () {\r\n        const str: string = (this.result as string || '').replace(/^data:(.{0,99},)?/, '');\r\n        deferred.resolve({\r\n            content: str,\r\n            encoding: 'base64'\r\n        });\r\n    };\r\n\r\n    reader.onerror = function () {\r\n        deferred.reject({\r\n            code: 'E_INVALID_DATA',\r\n            message: 'Cannot convert Blob to base64',\r\n            args: {\r\n                originalError: reader.error\r\n            }\r\n        });\r\n    };\r\n\r\n    reader.readAsDataURL(blob);\r\n\r\n    return deferred;\r\n}\r\n\r\nfunction getPort<T>(address: string): IPromise<T> {\r\n    if (CryptoClient.settings.port.value === -1) {\r\n        let url = address + CryptoClient.settings.defaultPort + '/api/gate';\r\n        return sendRequest<T>('GET', url, null, null);\r\n    } else {\r\n        const deferred = new Deferred<T>();\r\n        deferred.resolve(CryptoClient.settings.port.value);\r\n        return deferred;\r\n    }\r\n}\r\n\r\nexport function send<T>(method: string, address: string, request: string, data: any, success?: (res: any) => T): IPromise<T> {\r\n    const deferred = new Deferred<T>();\r\n\r\n    getPort<T>(address).then(\r\n        (p) => {\r\n            CryptoClient.settings.port.value = p;\r\n            let url = address + CryptoClient.settings.port.value + '/api' + request;\r\n            sendRequest<T>(method, url, data, success).then(\r\n                (result) => {\r\n                    deferred.resolve(result);\r\n                },\r\n                (error) => {\r\n                    deferred.reject(error);\r\n                }\r\n            );\r\n        },\r\n        // если не удалось получить порт от коммутатора, то скорее всего используется старая версия криптосервиса,\r\n        // поэтому все запросы отправляем на порт по умолчанию\r\n        (error) => {\r\n            CryptoClient.settings.port.value = CryptoClient.settings.defaultPort;\r\n            let url = address + CryptoClient.settings.port.value + '/api' + request;\r\n            sendRequest<T>(method, url, data, success).then(\r\n                (result) => {\r\n                    deferred.resolve(result);\r\n                },\r\n                (error) => {\r\n                    deferred.reject(error);\r\n                }\r\n            );\r\n        }\r\n    );\r\n\r\n    return deferred;\r\n}\r\n\r\nfunction sendRequest<T>(method: string, url: string, data: any, success?: (res: any) => T): IPromise<T> {\r\n    const deferred = new Deferred<T>();\r\n    try {\r\n        const xhr = new XHR();\r\n\r\n        xhr.onload = () => {\r\n            const response = JSON.parse(xhr.responseText);\r\n            const xhrStatus = response.status;\r\n            const res = response.content;\r\n\r\n            if (xhrStatus > 0 && xhrStatus < 400) {\r\n                deferred.resolve(success ? success(res) : res);\r\n            } else {\r\n                deferred.reject(res);\r\n            }\r\n        };\r\n        xhr.onerror = () => {\r\n            deferred.reject({\r\n                code: 'E_CONNECTION_ERROR',\r\n                message: 'Cannot connect to server'\r\n            });\r\n        };\r\n\r\n        xhr.open(method, url);\r\n        xhr.send(JSON.stringify(data));\r\n    } catch (e) {\r\n        deferred.reject({\r\n            code: 'E_CONNECTION_ERROR',\r\n            message: e.message\r\n        });\r\n    }\r\n    return deferred;\r\n}\r\n\r\nexport function getOptions<T>(vals: T, defs: T): T {\r\n    const opts = {};\r\n    vals = vals || <T>{};\r\n\r\n    Object.keys(defs).forEach(key => {\r\n        const val = vals[key];\r\n        opts[key] = val === undefined ? defs[key] : val;\r\n    });\r\n\r\n    return <T>opts;\r\n}\r\n\r\ndeclare class XDomainRequest extends XMLHttpRequest { }\r\nconst XHR = /MSIE [89]/i.test(navigator.userAgent) ? XDomainRequest : XMLHttpRequest;\r\n"],"sourceRoot":""}